/* Auto-generated by genmsg_cpp for file /home/jiaji/TestNatNet/Mocap/msg/marker_set.msg */
#ifndef MOCAP_MESSAGE_MARKER_SET_H
#define MOCAP_MESSAGE_MARKER_SET_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"

namespace Mocap
{
template <class ContainerAllocator>
struct marker_set_ {
  typedef marker_set_<ContainerAllocator> Type;

  marker_set_()
  : markers()
  {
  }

  marker_set_(const ContainerAllocator& _alloc)
  : markers(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _markers_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  markers;


  typedef boost::shared_ptr< ::Mocap::marker_set_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Mocap::marker_set_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct marker_set
typedef  ::Mocap::marker_set_<std::allocator<void> > marker_set;

typedef boost::shared_ptr< ::Mocap::marker_set> marker_setPtr;
typedef boost::shared_ptr< ::Mocap::marker_set const> marker_setConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Mocap::marker_set_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Mocap::marker_set_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Mocap

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Mocap::marker_set_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Mocap::marker_set_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Mocap::marker_set_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6624873dc67f1433082b48053784a174";
  }

  static const char* value(const  ::Mocap::marker_set_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6624873dc67f1433ULL;
  static const uint64_t static_value2 = 0x082b48053784a174ULL;
};

template<class ContainerAllocator>
struct DataType< ::Mocap::marker_set_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Mocap/marker_set";
  }

  static const char* value(const  ::Mocap::marker_set_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Mocap::marker_set_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point[] markers\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::Mocap::marker_set_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Mocap::marker_set_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.markers);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct marker_set_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Mocap::marker_set_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Mocap::marker_set_<ContainerAllocator> & v) 
  {
    s << indent << "markers[]" << std::endl;
    for (size_t i = 0; i < v.markers.size(); ++i)
    {
      s << indent << "  markers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.markers[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // MOCAP_MESSAGE_MARKER_SET_H

