/* Auto-generated by genmsg_cpp for file /home/jiaji/TestNatNet/Mocap/msg/mocap_frame.msg */
#ifndef MOCAP_MESSAGE_MOCAP_FRAME_H
#define MOCAP_MESSAGE_MOCAP_FRAME_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/PoseArray.h"
#include "Mocap/marker_set.h"
#include "Mocap/marker_set.h"

namespace Mocap
{
template <class ContainerAllocator>
struct mocap_frame_ {
  typedef mocap_frame_<ContainerAllocator> Type;

  mocap_frame_()
  : header()
  , number(0)
  , body_poses()
  , uid_markers()
  , id_marker_sets()
  {
  }

  mocap_frame_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , number(0)
  , body_poses(_alloc)
  , uid_markers(_alloc)
  , id_marker_sets(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int64_t _number_type;
  int64_t number;

  typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _body_poses_type;
   ::geometry_msgs::PoseArray_<ContainerAllocator>  body_poses;

  typedef  ::Mocap::marker_set_<ContainerAllocator>  _uid_markers_type;
   ::Mocap::marker_set_<ContainerAllocator>  uid_markers;

  typedef std::vector< ::Mocap::marker_set_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::Mocap::marker_set_<ContainerAllocator> >::other >  _id_marker_sets_type;
  std::vector< ::Mocap::marker_set_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::Mocap::marker_set_<ContainerAllocator> >::other >  id_marker_sets;


  typedef boost::shared_ptr< ::Mocap::mocap_frame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Mocap::mocap_frame_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct mocap_frame
typedef  ::Mocap::mocap_frame_<std::allocator<void> > mocap_frame;

typedef boost::shared_ptr< ::Mocap::mocap_frame> mocap_framePtr;
typedef boost::shared_ptr< ::Mocap::mocap_frame const> mocap_frameConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Mocap::mocap_frame_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Mocap::mocap_frame_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Mocap

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Mocap::mocap_frame_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Mocap::mocap_frame_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Mocap::mocap_frame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1a6d089936177be68712dd54f291892c";
  }

  static const char* value(const  ::Mocap::mocap_frame_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1a6d089936177be6ULL;
  static const uint64_t static_value2 = 0x8712dd54f291892cULL;
};

template<class ContainerAllocator>
struct DataType< ::Mocap::mocap_frame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Mocap/mocap_frame";
  }

  static const char* value(const  ::Mocap::mocap_frame_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Mocap::mocap_frame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
int64 number\n\
geometry_msgs/PoseArray body_poses\n\
# Unidenfied markers. (E.g., the single marker used for calibration).	\n\
Mocap/marker_set uid_markers\n\
# The set of identified markers.\n\
Mocap/marker_set[] id_marker_sets\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseArray\n\
# An array of poses with a header for global reference.\n\
\n\
Header header\n\
\n\
Pose[] poses\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: Mocap/marker_set\n\
geometry_msgs/Point[] markers\n\
";
  }

  static const char* value(const  ::Mocap::mocap_frame_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::Mocap::mocap_frame_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::Mocap::mocap_frame_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Mocap::mocap_frame_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.number);
    stream.next(m.body_poses);
    stream.next(m.uid_markers);
    stream.next(m.id_marker_sets);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct mocap_frame_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Mocap::mocap_frame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Mocap::mocap_frame_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "number: ";
    Printer<int64_t>::stream(s, indent + "  ", v.number);
    s << indent << "body_poses: ";
s << std::endl;
    Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "  ", v.body_poses);
    s << indent << "uid_markers: ";
s << std::endl;
    Printer< ::Mocap::marker_set_<ContainerAllocator> >::stream(s, indent + "  ", v.uid_markers);
    s << indent << "id_marker_sets[]" << std::endl;
    for (size_t i = 0; i < v.id_marker_sets.size(); ++i)
    {
      s << indent << "  id_marker_sets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::Mocap::marker_set_<ContainerAllocator> >::stream(s, indent + "    ", v.id_marker_sets[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // MOCAP_MESSAGE_MOCAP_FRAME_H

