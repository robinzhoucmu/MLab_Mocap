/* Auto-generated by genmsg_cpp for file /home/jiaji/TestNatNet/Mocap/srv/mocap_GetMocapFrame.srv */
#ifndef MOCAP_SERVICE_MOCAP_GETMOCAPFRAME_H
#define MOCAP_SERVICE_MOCAP_GETMOCAPFRAME_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "Mocap/mocap_frame.h"

namespace Mocap
{
template <class ContainerAllocator>
struct mocap_GetMocapFrameRequest_ {
  typedef mocap_GetMocapFrameRequest_<ContainerAllocator> Type;

  mocap_GetMocapFrameRequest_()
  {
  }

  mocap_GetMocapFrameRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct mocap_GetMocapFrameRequest
typedef  ::Mocap::mocap_GetMocapFrameRequest_<std::allocator<void> > mocap_GetMocapFrameRequest;

typedef boost::shared_ptr< ::Mocap::mocap_GetMocapFrameRequest> mocap_GetMocapFrameRequestPtr;
typedef boost::shared_ptr< ::Mocap::mocap_GetMocapFrameRequest const> mocap_GetMocapFrameRequestConstPtr;


template <class ContainerAllocator>
struct mocap_GetMocapFrameResponse_ {
  typedef mocap_GetMocapFrameResponse_<ContainerAllocator> Type;

  mocap_GetMocapFrameResponse_()
  : mf()
  , ret(0)
  , msg()
  {
  }

  mocap_GetMocapFrameResponse_(const ContainerAllocator& _alloc)
  : mf(_alloc)
  , ret(0)
  , msg(_alloc)
  {
  }

  typedef  ::Mocap::mocap_frame_<ContainerAllocator>  _mf_type;
   ::Mocap::mocap_frame_<ContainerAllocator>  mf;

  typedef int64_t _ret_type;
  int64_t ret;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct mocap_GetMocapFrameResponse
typedef  ::Mocap::mocap_GetMocapFrameResponse_<std::allocator<void> > mocap_GetMocapFrameResponse;

typedef boost::shared_ptr< ::Mocap::mocap_GetMocapFrameResponse> mocap_GetMocapFrameResponsePtr;
typedef boost::shared_ptr< ::Mocap::mocap_GetMocapFrameResponse const> mocap_GetMocapFrameResponseConstPtr;

struct mocap_GetMocapFrame
{

typedef mocap_GetMocapFrameRequest Request;
typedef mocap_GetMocapFrameResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct mocap_GetMocapFrame
} // namespace Mocap

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Mocap/mocap_GetMocapFrameRequest";
  }

  static const char* value(const  ::Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "88eb9becce3c4d765d589b1c8e5c1b44";
  }

  static const char* value(const  ::Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x88eb9becce3c4d76ULL;
  static const uint64_t static_value2 = 0x5d589b1c8e5c1b44ULL;
};

template<class ContainerAllocator>
struct DataType< ::Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Mocap/mocap_GetMocapFrameResponse";
  }

  static const char* value(const  ::Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mocap_frame mf\n\
int64 ret\n\
string msg\n\
\n\
\n\
================================================================================\n\
MSG: Mocap/mocap_frame\n\
Header header\n\
int64 number\n\
geometry_msgs/PoseArray body_poses\n\
# Unidenfied markers. (E.g., the single marker used for calibration).	\n\
Mocap/marker_set uid_markers\n\
# The set of identified markers.\n\
Mocap/marker_set[] id_marker_sets\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseArray\n\
# An array of poses with a header for global reference.\n\
\n\
Header header\n\
\n\
Pose[] poses\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: Mocap/marker_set\n\
geometry_msgs/Point[] markers\n\
";
  }

  static const char* value(const  ::Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct mocap_GetMocapFrameRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mf);
    stream.next(m.ret);
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct mocap_GetMocapFrameResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<Mocap::mocap_GetMocapFrame> {
  static const char* value() 
  {
    return "88eb9becce3c4d765d589b1c8e5c1b44";
  }

  static const char* value(const Mocap::mocap_GetMocapFrame&) { return value(); } 
};

template<>
struct DataType<Mocap::mocap_GetMocapFrame> {
  static const char* value() 
  {
    return "Mocap/mocap_GetMocapFrame";
  }

  static const char* value(const Mocap::mocap_GetMocapFrame&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "88eb9becce3c4d765d589b1c8e5c1b44";
  }

  static const char* value(const Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Mocap/mocap_GetMocapFrame";
  }

  static const char* value(const Mocap::mocap_GetMocapFrameRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "88eb9becce3c4d765d589b1c8e5c1b44";
  }

  static const char* value(const Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Mocap/mocap_GetMocapFrame";
  }

  static const char* value(const Mocap::mocap_GetMocapFrameResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MOCAP_SERVICE_MOCAP_GETMOCAPFRAME_H

